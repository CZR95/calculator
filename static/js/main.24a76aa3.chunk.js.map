{"version":3,"sources":["averageDown.jsx","serviceWorker.js","index.js"],"names":["averageDown","state","stock1Price","stock1Lot","stock21Price","stock2Lot","setStock1Price","price","console","log","setState","setStock1Lot","lot","setStock2Price","stock2Price","setStock2Lot","calculate","product","Fragment","id","type","onChange","input","target","value","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gLA8GeA,G,kNAvGbC,MAAQ,CACNC,YAAa,EACbC,UAAW,EACXC,aAAc,EACdC,UAAW,G,EAyEbC,eAAiB,SAACC,GAChBC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAER,YAAaK,K,EAG/BI,aAAe,SAACC,GACdJ,QAAQC,IAAIG,GACZ,EAAKF,SAAS,CAAEP,UAAWS,K,EAG7BC,eAAiB,SAACN,GAChBC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAEI,YAAaP,K,EAG/BQ,aAAe,SAACH,GACdJ,QAAQC,IAAIG,GACZ,EAAKF,SAAS,CAAEL,UAAWO,K,EAG7BI,UAAY,SAACC,GACXT,QAAQC,IAAIQ,GACZT,QAAQC,IAAI,EAAKR,MAAMC,c,uDAxFf,IAAD,OACP,OACE,kBAAC,IAAMgB,SAAP,KACE,4CACiB,IACf,8BACE,2BACEC,GAAG,YACHC,KAAK,SACLC,SAAU,SAACC,GACT,EAAKhB,eAAegB,EAAMC,OAAOC,YAMzC,0CACe,IACb,8BACE,2BACEL,GAAG,YACHC,KAAK,SACLC,SAAU,SAACC,GACT,EAAKX,aAAaW,EAAMC,OAAOC,YAMvC,4CACiB,IACf,8BACE,2BACEL,GAAG,YACHC,KAAK,SACLC,SAAU,SAACC,GACT,EAAKP,aAAaO,EAAMC,OAAOC,YAMvC,0CACe,IACb,8BACE,2BACEL,GAAG,YACHC,KAAK,SACLC,SAAU,SAACC,GACT,EAAKP,aAAaO,EAAMC,OAAOC,YAMvC,4BACEC,QAAS,WACP,EAAKT,cAFT,kB,GAnEkBU,cCMNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAiBC,SAASC,eAAe,SD8HnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.24a76aa3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\n// import component from another component\r\n//import TextField from \"./components/textField.jsx\";\r\n\r\nclass averageDown extends Component {\r\n  state = {\r\n    stock1Price: 0,\r\n    stock1Lot: 0,\r\n    stock21Price: 0,\r\n    stock2Lot: 0,\r\n  };\r\n\r\n  // constructor() {\r\n  //   super();\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <p>\r\n          1st Buy Price:{\" \"}\r\n          <span>\r\n            <input\r\n              id=\"tradeDate\"\r\n              type=\"number\"\r\n              onChange={(input) => {\r\n                this.setStock1Price(input.target.value);\r\n              }}\r\n            />\r\n          </span>\r\n        </p>\r\n\r\n        <p>\r\n          1st Buy lot:{\" \"}\r\n          <span>\r\n            <input\r\n              id=\"tradeDate\"\r\n              type=\"number\"\r\n              onChange={(input) => {\r\n                this.setStock1Lot(input.target.value);\r\n              }}\r\n            />\r\n          </span>\r\n        </p>\r\n\r\n        <p>\r\n          2nd Buy Price:{\" \"}\r\n          <span>\r\n            <input\r\n              id=\"tradeDate\"\r\n              type=\"number\"\r\n              onChange={(input) => {\r\n                this.setStock2Lot(input.target.value);\r\n              }}\r\n            />\r\n          </span>\r\n        </p>\r\n\r\n        <p>\r\n          2nd Buy lot:{\" \"}\r\n          <span>\r\n            <input\r\n              id=\"tradeDate\"\r\n              type=\"number\"\r\n              onChange={(input) => {\r\n                this.setStock2Lot(input.target.value);\r\n              }}\r\n            />\r\n          </span>\r\n        </p>\r\n\r\n        <button\r\n          onClick={() => {\r\n            this.calculate();\r\n          }}\r\n        >\r\n          Calculate\r\n        </button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  setStock1Price = (price) => {\r\n    console.log(price);\r\n    this.setState({ stock1Price: price });\r\n  };\r\n\r\n  setStock1Lot = (lot) => {\r\n    console.log(lot);\r\n    this.setState({ stock1Lot: lot });\r\n  };\r\n\r\n  setStock2Price = (price) => {\r\n    console.log(price);\r\n    this.setState({ stock2Price: price });\r\n  };\r\n\r\n  setStock2Lot = (lot) => {\r\n    console.log(lot);\r\n    this.setState({ stock2Lot: lot });\r\n  };\r\n\r\n  calculate = (product) => {\r\n    console.log(product);\r\n    console.log(this.state.stock1Price);\r\n  };\r\n}\r\n\r\nexport default averageDown;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport AverageDown from \"./averageDown\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<AverageDown />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}